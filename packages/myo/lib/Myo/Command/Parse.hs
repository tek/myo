module Myo.Command.Parse where

-- import Control.Lens (at, element, firstOf, over, view, (^.))
-- import Ribosome.Config.Setting (setting, Settings.maybe)
-- import Ribosome.Data.SettingError (SettingError)
-- import qualified Ribosome.Log as Log
-- import Ribosome.Msgpack.Error (DecodeError)
-- import Text.RE.PCRE.Text (RE, SearchReplace, ed, (*=~/))

-- import Myo.Command.Command (commandByIdent, latestCommand)
-- import Myo.Command.Data.Command (Command(Command), CommandLanguage(CommandLanguage))
-- import qualified Myo.Command.Data.Command as Command (ident)
-- import Myo.Command.Data.CommandError (CommandError)
-- import Myo.Command.Data.CommandLog (CommandLog, CommandLog(CommandLog))
-- import qualified Myo.Command.Data.CommandLog as CommandLog (current, previous)
-- import Myo.Command.Data.CommandState (CommandState, OutputState(OutputState))
-- import qualified Myo.Command.Data.CommandState as CommandState (output, outputHandlers)
-- import Myo.Command.Data.ParseOptions (ParseOptions(ParseOptions))
-- import Myo.Command.Data.RunError (RunError)
-- import Myo.Command.History (displayNameByIdent)
-- import Myo.Command.Log (commandLog, commandLogByName, mainCommandOrHistory)
-- import Myo.Command.Output (compileAndRenderReport)
-- import Myo.Command.RunTask (runTask)
-- import Myo.Command.Runner (findRunner)
-- import Myo.Data.Env (Env, Runner(Runner))
-- import qualified Myo.Output.Data.EventIndex as EventIndex (Absolute(Absolute))
-- import Myo.Output.Data.OutputError (OutputError)
-- import qualified Myo.Output.Data.OutputError as OutputError (OutputError(NoLang, NoHandler, NoOutput))
-- import Myo.Output.Data.OutputHandler (OutputHandler(OutputHandler))
-- import Myo.Output.Data.OutputParser (OutputParser(OutputParser))
-- import Myo.Output.Data.ParsedOutput (ParsedOutput)
-- import qualified Myo.Output.Data.ParsedOutput as ParsedOutput (allEmpty, events, syntax)
-- import qualified Myo.Settings as Settings (displayResult, proteomeMainType)

-- selectCommand ::
--   Member (AtomicState Env) r =>
--   Maybe Ident ->
--   m Command
-- selectCommand (Just ident) = commandByIdent "selectCommand" ident
-- selectCommand Nothing = latestCommand

-- removeTerminalCodesRE :: SearchReplace RE Text
-- removeTerminalCodesRE =
--   [ed|\e\[[0-9;?]*[a-zA-z]///|]

-- removeLineFeedRE :: SearchReplace RE Text
-- removeLineFeedRE =
--   [ed|\r///|]

-- sanitizeOutput :: Text -> Text
-- sanitizeOutput =
--   (*=~/ removeTerminalCodesRE) . (*=~/ removeLineFeedRE)

-- commandOutputResult ::
--   Text ->
--   Maybe ByteString ->
--   m Text
-- commandOutputResult ident =
--   maybe err convert
--   where
--     convert =
--       pure . sanitizeOutput . decodeUtf8
--     err =
--       stop $ OutputError.NoOutput ident

-- logOrCapture ::
--   MonadIO m =>
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   Command ->
--   Bool ->
--   m (Maybe CommandLog)
-- logOrCapture cmd = \case
--   True -> do
--     task <- runTask cmd
--     tryCapture task =<< findRunner task
--   False ->
--     commandLog (cmd ^. Command.ident)
--   where
--     tryCapture task = \case
--       Runner _ _ _ _ (Just capture) -> do
--         log <- hoistEither =<< liftIO (capture task)
--         pure (Just (CommandLog [] log))
--       _ ->
--         pure Nothing

-- logOrCaptureByIdent ::
--   MonadIO m =>
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   Ident ->
--   Bool ->
--   m (Maybe CommandLog)
-- logOrCaptureByIdent ident capture = do
--   cmd <- mainCommandOrHistory ident
--   logOrCapture cmd capture

-- commandOutput ::
--   MonadIO m =>
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   Ident ->
--   Maybe Natural ->
--   Bool ->
--   m Text
-- commandOutput ident index capture = do
--   name <- displayNameByIdent ident
--   commandOutputResult name . (>>= select) =<< logOrCaptureByIdent ident capture
--   where
--     select =
--       maybe (Just . view CommandLog.current) selectPrevious (fromIntegral <$> index)
--     selectPrevious i =
--       firstOf (CommandLog.previous . element i)

-- commandOutputByName ::
--   Member (AtomicState Env) r =>
--   Text ->
--   m Text
-- commandOutputByName name =
--   commandOutputResult name =<< fmap (view CommandLog.current) <$> commandLogByName name

-- handlersForLang ::
--   CommandLanguage ->
--   m [OutputHandler]
-- handlersForLang lang = do
--   result <- atomicGets $ CommandState.outputHandlers . at lang
--   stopNote (OutputError.NoHandler lang) result

-- parseWith ::
--   MonadIO m =>
--   OutputParser ->
--   Text ->
--   m ParsedOutput
-- parseWith (OutputParser parser sanitize) =
--   liftIO . sanitize <=< hoistEither . parser

-- parseWithLang ::
--   MonadIO m =>
--   Member (AtomicState Env) r =>
--   CommandLanguage ->
--   Text ->
--   m [ParsedOutput]
-- parseWithLang lang output = do
--   handlers <- handlersForLang lang
--   traverse parse handlers
--   where
--     parse (OutputHandler parser) =
--       parseWith parser output

-- parseCommandWithLang ::
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   CommandLanguage ->
--   Ident ->
--   Bool ->
--   m [ParsedOutput]
-- parseCommandWithLang lang ident capture =
--   ensureEvents =<< parseIndex Nothing
--   where
--     ensureEvents a =
--       if ParsedOutput.allEmpty a then parseIndex (Just 0) else pure a
--     parseIndex index = do
--       output <- commandOutput ident index capture
--       Log.showDebug "parse output:" output
--       parseWithLang lang output

-- projectLanguage ::
--   m (Maybe CommandLanguage)
-- projectLanguage =
--   fmap CommandLanguage <$> Settings.maybe Settings.proteomeMainType

-- parseCommand ::
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   Command ->
--   m [ParsedOutput]
-- parseCommand (Command _ ident _ _ (Just lang) _ _ _ capture) =
--   parseCommandWithLang lang ident capture
-- parseCommand (Command _ ident _ _ Nothing _ _ _ capture) = do
--   lang <- stopNote (OutputError.NoLang ident) =<< projectLanguage
--   parseCommandWithLang lang ident capture

-- storeParseResult ::
--   Member (AtomicState Env) r =>
--   Ident ->
--   [ParsedOutput] ->
--   m ()
-- storeParseResult ident output =
--   setL @CommandState CommandState.output (Just outputState)
--   where
--     outputState =
--       OutputState ident syntax events (EventIndex.Absolute 0) Nothing
--     syntax =
--       view ParsedOutput.syntax <$> output
--     events =
--       foldMap (view ParsedOutput.events) output

-- myoParse ::
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   ParseOptions ->
--   m ()
-- myoParse (ParseOptions _ ident _) = do
--   cmd <- selectCommand ident
--   parsedOutput <- parseCommand cmd
--   storeParseResult (view Command.ident cmd) parsedOutput
--   display <- setting Settings.displayResult
--   when display compileAndRenderReport

-- myoParseLatest ::
--   Member (AtomicState Env) r =>
--   Member (AtomicState Env) r =>
--   m ()
-- myoParseLatest =
--   myoParse (ParseOptions Nothing Nothing Nothing)

-- addHandler :: Member (AtomicState Env) r => CommandLanguage -> OutputHandler -> m ()
-- addHandler lang parser =
--   modify @CommandState $ over (CommandState.outputHandlers . at lang) update
--   where
--     update (Just current) = Just (parser : current)
--     update Nothing = Just [parser]
